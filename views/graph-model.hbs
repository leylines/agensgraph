<div id="graph"></div>

<script>
  function drawGraph(result) {
    const Graph = ForceGraph()
    (document.getElementById('graph'))
      .backgroundColor('rgba(255, 255, 255)')
      .graphData(result)
      .nodeAutoColorBy('label')
      .nodeVal('val')
      .nodeLabel('label')
//      .linkAutoColorBy('label')
      .linkAutoColorBy(d => result.nodes[result.nodes.findIndex(node => node.id == d.source)].label)
      .linkWidth(2)
      .linkLabel('label')
      .linkCurvature(0.1)
      .linkDirectionalParticles(1)
      .linkDirectionalParticleWidth(2)
      .linkDirectionalParticleSpeed(0.005)
//    .nodeCanvasObject((node, ctx, globalScale) => {
//      const label = node.label;
//      const value = node.value;
//      const fontSize = globalScale * value * 0.5;
//      ctx.font = `${fontSize}px Sans-Serif`;
//      const textWidth = ctx.measureText(label).width;
//      const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding
//      ctx.fillStyle = 'rgba(255, 255, 255, 0)';
//      ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);
//      ctx.textAlign = 'center';
//      ctx.textBaseline = 'middle';
//      ctx.fillStyle = node.color;
//      ctx.fillText(label, node.x, node.y);
//    });
  }
  function logError(error) {
    console.log('Looks like there was a problem: \n', error);
  }
  function validateResponse(response) {
    if (!response.ok) {
      throw Error(response.statusText);
    }
    return response;
  }
  function readResponseAsJSON(response) {
    return response.json();
  }
  function fetchJSON(pathToResource) {
    fetch(pathToResource)
    .then(validateResponse)
    .then(readResponseAsJSON)
    .then(drawGraph)
    .catch(logError);
  }
  fetchJSON('/download/model-{{type}}');
</script>
